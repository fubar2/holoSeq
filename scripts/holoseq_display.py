# ruff: noqa

# see https://github.com/holoviz-topics/holoSeq
# pip install datashader dask[dataframe] holoviews[recommended] pandas matplotlib bokeh
#
# panel serve --address 0.0.0.0 --port 8080 --show --session-token-expiration 9999999 --args --inFile ../hg002_bothHiC.paf_cisH1_hseq.gz
# This is a generic plot re-creator for holoSeq hseq compressed coordinate data.
# It presents interactive plots at scale using panel.
# Plot coordinates and axis metadata are prepared from genomic data such as PAF or bigwig files,
# using companion converters. They output all the information needed to re-create an interactive plot, as coordinates and axis metadata.
# The intended use case is making interactive specialised browsers for VGP and other genome assemblies and their annotation
# easily browsed and explored using a web browser.
# Annotation files with 10s of millions of data points can be zoomed smoothly down from the whole assembly scale, down to individual points,
# on a laptop.
# Ross Lazarus October 2024

import argparse
import gzip
import logging
import os
from bisect import bisect_left
from collections import OrderedDict

from holoseq import holoseq_data
from holoseq import gff
from holoseq import bigwig
from holoseq import pair2d



from holoseq import holoseq_data
from holoseq import gff
from holoseq import bigwig
from holoseq import pair2d


logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger("holoseq_prepare")

import holoviews as hv
import numpy as np
import pandas as pd
import panel as pn
from holoviews.operation import decimate
from holoviews.operation.datashader import dynspread, rasterize
from holoviews.operation.element import apply_when
from holoviews.operation.resample import ResampleOperation2D

logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger("holoseq_display")
hv.extension("bokeh", "matplotlib", width=100)

# Default values suitable for this notebook
decimate.max_samples = 1000
dynspread.max_px = 8
dynspread.threshold = 0.75
ResampleOperation2D.width = 250
ResampleOperation2D.height = 250


inFile = ""
holoSeqHeaders = ["@v1HoloSeq1D", "@v1HoloSeq2D"]
hv.extension("bokeh")
pn.extension()

dynspread.max_px = 7
dynspread.threshold = 0.6


def xportHtml(fname, hObj):
    "save a holoview object to an interactive but not adaptive scaling HTML page"
    hv.save(filename=fname, obj=hObj)



parser = argparse.ArgumentParser(description="", epilog="")
parser.add_argument(
    "--inFile",
    help="gzipped hseq coordinates and contigs generated by the holoseq_prepare_gz script",
    default="test/mUroPar1_cis1.hseq.gz",
    nargs="+",
)
parser.add_argument("--size", help="Display size in pixels. Default is 1000", default=1000)
parser.add_argument("--version", "-V", action="version", version="0.1")
args = parser.parse_args()
pwidth = int(args.size)
for i, infile in enumerate(args.inFile):
    print("Infile = ", infile)
    metdat = holoseq_data.getMetadata(infile)
    cls = metdat['class'][0]
    if cls == 'pair2d':
        p = holoseq.pair2d.pair2d
        p.load(infile)
        p1, t1 = p.makePanel()
    if i == 0:
        outp = p1
    else:
        outp = outp + p1
pn.Row(outp).servable(title=title)
